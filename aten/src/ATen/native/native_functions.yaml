# ATen native functions are a mechanism to write ATen methods which only
# make use of other ATen operations (e.g., it is not necessary to bind into
# TH/THC code).  These functions are declared in this file and then folded
# into the ATen code generation process.
#
# The simple format is as follows:
# - func: func_name(ArgType arg0[=default], ArgType arg1[=default], ...) -> ReturnType
# ArgType(s) are allowed to be simple types understood by ATen
# (e.g. Tensor, TensorList, IntList, int64_t, double).
# ReturnType is allowed to be any ArgType or tuple combination of ArgTypes(s), e.g. (Tensor, Tensor)
# defaults are optional and are only allowed to be numbers (e.g. '0' for int64_t, '5.0' for double)
#
# The declarations also support the following attributes:
# variants: [function, method] by default; controls whether Tensor method or namespace Function is generated
#           as a result of this declaration.
# dispatch: equal to the func_name by default; this can be overridden by providing a
#           backend-specific name to dispatch to, e.g.:
#           CPU: func_cpu
#           CUDA: func_cuda
# template_scalar: if set to True, generates the native function as a templatized function on the scalar
#                  (C++) type of the underlying function.
# primitive: if True, this is a "primitive" native declaration, which
#            must have its derivative expressed directly.  Non-primitive declarations
#            may directly access the pointer data of their tensors, and
#            generally cannot be differentiated simply by making use of
#            the fact that they call other ATen functions.
#
# In addition to the variants generation, these declarations will also generate a C++ function declaration
# in NativeFunctions.h; it is up to you to write the corresponding definitions in the correct file under /native
# (the exact file depends on if you are writing a generic (all backend), or CPU/CUDA specific implementation).
# Note that these generated C++ function declarations won't match the declaration here because they will
# undergo the standard ATen C++ transformations, e.g. use of const-ref for non-inplace Tensor arguments.  It is
# recommended that you copy the generated C++ function declaration to your definition so that the two
# match.

- func: type_as(Tensor self, Tensor other) -> Tensor

- func: expand_as(Tensor self, Tensor other) -> Tensor

- func: split(Tensor self, int64_t split_size, int64_t dim=0) -> TensorList
  # This is not primitive, but if you derive the derivative
  # automatically it is very inefficient (the backwards of 'narrow' is
  # very inefficient, as it must zero pad its gradient into the size
  # of the original input.)

- func: chunk(Tensor self, int64_t chunks, int64_t dim=0) -> TensorList

- func: size(Tensor self, int64_t dim) -> int64_t

- func: stride(Tensor self, int64_t dim) -> int64_t

- func: index(Tensor self, TensorList indices) -> Tensor
  # NB: This function is special-cased in tools/autograd/gen_variable_type.py

- func: index_put_(Tensor self, TensorList indices, Tensor values) -> Tensor

- func: is_nonzero(Tensor self) -> bool

- func: is_same_size(Tensor self, Tensor other) -> bool

- func: is_cuda(Tensor self) -> bool

- func: is_distributed(Tensor self) -> bool

- func: is_sparse(Tensor self) -> bool

- func: select(Tensor self, int64_t dim, int64_t index) -> Tensor

- func: narrow(Tensor self, int64_t dim, int64_t start, int64_t length) -> Tensor

- func: slice(Tensor self, int64_t start=0, int64_t end=9223372036854775807, int64_t step=1, int64_t dim=0) -> Tensor

- func: permute(Tensor self, IntList dims) -> Tensor
  # Manually differentiated (but not primitive, uses as_strided)

- func: expand(Tensor self, IntList size) -> Tensor
  # Manually differentiated (but not primitive, uses as_strided)

- func: squeeze(Tensor self) -> Tensor
  # Manually differentiated (but not primitive, uses as_strided)

- func: squeeze(Tensor self, int64_t dim) -> Tensor
  # Manually differentiated (but not primitive, uses as_strided)

- func: squeeze_(Tensor self) -> Tensor
  # Manually differentiated (but not primitive, uses as_strided)

- func: squeeze_(Tensor self, int64_t dim) -> Tensor
  # Manually differentiated (but not primitive, uses as_strided)

- func: unsqueeze(Tensor self, int64_t dim) -> Tensor
  # Manually differentiated (but not primitive, uses as_strided)

- func: unsqueeze_(Tensor self, int64_t dim) -> Tensor
  # Manually differentiated (but not primitive, uses as_strided)

- func: _det_with_svd(Tensor self) -> (Tensor, Tensor, Tensor, Tensor)
  primitive: True
  # This function returns the SVD for computing the derivative.
  # Don't try to differentiate it directly.

- func: det(Tensor self) -> Tensor

- func: stack(TensorList tensors, int64_t dim=0) -> Tensor
  variants: function

- func: allclose(Tensor self, Tensor other, double rtol=1e-5, double atol=1e-8) -> bool

- func: is_signed(Tensor self) -> bool
  template_scalar: True

- func: matmul(Tensor self, Tensor other) -> Tensor

- func: RoiPooling2d_forward(Tensor input, Tensor rois, int64_t pooledHeight, int64_t pooledWidth, double spatialScale) -> (Tensor, Tensor)
  primitive: True
  variants: function
  dispatch:
    CPU: RoiPooling2d_forward_cpu
    CUDA: RoiPooling2d_forward_cuda

- func: RoiPooling2d_backward(Tensor input, Tensor rois, int64_t pooledHeight, int64_t pooledWidth, double spatialScale, Tensor gradOutput, Tensor argmaxes) -> Tensor
  primitive: True
  variants: function
  dispatch:
    CPU: RoiPooling2d_backward_cpu
    CUDA: RoiPooling2d_backward_cuda

- func: _convolution_nogroup(Tensor input, Tensor weight, Tensor? bias, IntList stride, IntList padding, IntList dilation, bool transposed, IntList output_padding) -> Tensor
  variants: function

- func: _convolution(Tensor input, Tensor weight, Tensor? bias, IntList stride, IntList padding, IntList dilation, bool transposed, IntList output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled) -> Tensor
  variants: function

# NB: We MUST call the input self, otherwise codegen will attempt to
# dispatch on ggI... which might be undefined.
- func: _convolution_double_backward(Tensor? ggI, Tensor? ggW, Tensor? ggb, Tensor gO, Tensor weight, Tensor self, IntList stride, IntList padding, IntList dilation, bool transposed, IntList output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled, std::array<bool,3> output_mask) -> (Tensor, Tensor, Tensor)
  variants: function
